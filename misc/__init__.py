"""
@Author: Simona Bernardi, Ra√∫l Javierre
@Date: 12/11/2020
"""

import os
import numpy as np
import pandas as pd
from statsmodels.tsa.stattools import adfuller, kpss
import random


class TSanalyzer:
    def __init__(self):
        # dataframe with all the readings: columns ['ID','DT','Usage']
        self.df = pd.DataFrame()

    def load_time_series(self, files, firstWeek, lastWeek, meterID):
        print("\nGenerating TSA for MeterID", meterID)

        for file in files[firstWeek:lastWeek + 1]:
            dset = pd.read_csv(file)
            dset = dset[dset.ID == meterID]
            self.df = pd.concat([self.df, dset])

    def stationarity_tests(self, ts):
        # ADF tests Null Hypothesis (H0): If failed to be rejected,
        # it suggests the time series has a unit root, meaning it is
        # non-stationary. It has some time dependent structure. Alternate
        # Hypothesis (H1): The null hypothesis is rejected; it suggests the
        # time series does not have a unit root, meaning it is stationary. It
        # does not have time-dependent structure.
        result_adf = adfuller(ts, autolag='AIC')

        # KPSS Test
        # Null Hypothesis (H0): If failed to be rejected, it suggest the
        # time series is stationary
        # Alternate hypothesis (H1): The H0 is rejected, then the time series
        # is not stationary.
        result_kpss = kpss(ts, regression='c', nlags='auto')

        return result_adf, result_kpss


def get_data_set_files_of_electricity_filtered():
    dpath = "./ISSDA-CER/Electricity/data/data_all_filtered"
    dirFiles = os.listdir(dpath)
    myfiles = []
    for files in dirFiles:
        pathfile = (dpath + '/') + files
        myfiles.append(pathfile)
        myfiles.sort(key=lambda x: int(x.split()[-1]))
    return myfiles


def get_meter_ids_and_files_electricity():
    ID = np.int_([])  # np array initialization
    files = get_data_set_files_of_electricity_filtered()

    for file in files:
        print("Getting meterIDs from", file)
        dset = pd.read_csv(file).ID.unique()
        ID = np.concatenate((ID, dset))

    # Removes the ID repetitions and return the array. Also returns the files
    return np.unique(ID), files


def get_data_set_files_of_gas_filtered():
    dpath = "./ISSDA-CER/Gas/data/data_all_filtered"
    dirFiles = os.listdir(dpath)
    myfiles = []
    for files in dirFiles:
        pathfile = (dpath + '/') + files
        myfiles.append(pathfile)
        myfiles.sort(key=lambda x: int(x.split()[-1]))
    return myfiles


def get_meter_ids_and_files_gas():
    ID = np.int_([])  # np array initialization
    files = get_data_set_files_of_gas_filtered()

    for file in files:
        print("Getting meterIDs from", file)
        dset = pd.read_csv(file).ID.unique()
        ID = np.concatenate((ID, dset))

    # Removes the ID repetitions and return the array. Also returns the files
    return np.unique(ID), files


def get_classification_of_meter_id(meterID, type):
    if type == "Electricity":
        df = pd.read_csv("./script_results/meterID_electricity.csv", sep=",",index_col='ID')
        return int(df.loc[[meterID]].Code)
    else:  # Gas
        df = pd.read_csv("./script_results/meterID_gas.csv", sep=",",index_col='ID')
        return int(df.loc[[meterID]].Code)


def get_808_random_residential_meter_ids():
    # Hardcoded list obtained with:
    """
    dset = pd.read_csv("./script_results/meterID_electricity.csv", sep=",", index_col='ID')
    dset = dset[dset.Code==1]
    list_of_ids = dset.index.values.tolist()
    list_of_ids = random.sample(list_of_ids, 808)
    print("Residential", list_of_ids)
    return list_of_ids
    """
    return [1540, 6629, 6665, 4507, 3428, 6046, 6340, 3124, 1200, 7137, 6206, 3807, 1389, 3449, 6145, 5511, 6882, 2623, 5971, 5712, 1768, 6197, 4081, 3563, 3837, 3247, 1441, 7036, 3683, 4147, 3705, 1299, 4095, 1642, 1643, 3920, 7017, 1807, 1695, 2746, 3133, 4590, 5736, 1576, 5196, 1556, 3201, 6686, 4453, 5830, 6576, 5290, 5717, 2825, 6253, 6584, 3398, 2208, 1155, 5161, 6281, 2648, 3849, 7431, 3471, 6507, 5715, 6332, 2004, 7368, 4568, 1488, 5725, 2328, 5153, 6805, 2856, 2638, 2785, 7194, 3670, 1895, 3795, 4932, 6444, 5248, 2481, 2885, 6184, 6852, 1694, 2778, 6623, 4394, 1165, 3120, 5549, 3590, 5857, 7321, 6819, 5271, 2752, 7434, 3767, 3279, 5064, 3228, 7301, 1119, 2634, 3866, 1779, 2857, 2085, 5397, 1863, 4878, 3079, 6074, 7400, 6207, 1790, 3610, 5027, 6067, 6667, 7000, 6314, 2035, 4090, 4100, 7424, 1541, 1153, 1523, 5981, 2867, 6677, 5594, 5882, 2772, 5795, 4986, 4724, 3458, 4522, 3140, 4296, 2253, 4520, 4239, 4307, 5583, 6317, 1594, 5503, 4894, 3954, 4124, 5156, 1464, 4148, 6493, 6809, 6109, 3976, 2784, 6305, 4382, 6807, 7387, 3010, 4116, 3185, 6384, 2073, 7255, 7031, 6039, 3750, 4496, 6917, 6935, 3159, 3081, 6223, 3164, 2443, 4244, 2334, 2126, 5011, 3434, 5563, 1517, 5067, 2754, 5253, 3922, 1749, 3486, 7063, 3407, 1288, 5932, 3640, 4273, 5652, 7085, 1075, 6238, 4815, 7070, 7078, 7100, 4174, 1710, 1747, 4632, 4749, 5636, 6123, 3662, 3961, 7132, 2636, 4835, 3572, 1514, 2570, 6773, 5075, 6144, 5429, 3058, 2345, 1359, 6904, 6031, 3736, 2113, 2319, 7159, 6395, 3048, 3758, 6158, 1239, 2567, 6902, 3556, 1014, 1102, 5656, 1844, 2756, 4094, 6551, 5559, 5545, 3489, 6345, 3678, 7216, 7108, 3268, 7040, 2987, 5837, 1076, 2053, 6848, 2985, 6298, 5498, 6560, 3860, 1847, 2675, 1717, 5954, 4380, 2838, 3620, 6735, 4914, 3221, 3708, 7413, 2576, 1361, 4698, 5057, 2129, 2792, 4022, 1133, 2247, 1371, 5528, 6181, 2104, 5589, 3032, 4223, 2358, 7249, 2632, 1734, 2786, 4045, 1416, 6375, 1648, 1143, 5593, 6226, 4388, 2886, 1846, 4546, 6471, 6607, 3293, 5894, 1088, 6410, 3889, 4078, 1966, 2412, 4213, 6446, 4417, 4379, 1567, 3004, 2163, 3734, 6488, 1633, 5408, 7003, 6753, 6504, 2827, 4392, 6737, 3775, 5446, 4770, 6524, 4005, 1147, 2530, 6108, 6013, 2808, 1214, 3154, 2915, 5524, 7120, 1081, 6638, 1817, 5055, 1878, 6940, 3589, 6720, 7391, 6903, 2388, 3686, 1910, 1446, 2056, 5730, 3393, 3388, 5428, 1991, 1115, 1797, 4801, 1758, 1566, 6065, 2895, 3383, 5098, 6637, 5443, 1160, 4673, 5270, 7128, 6119, 3715, 4401, 6005, 4924, 7403, 3059, 3638, 4624, 2281, 6411, 3138, 3525, 5110, 6380, 3918, 7406, 2801, 2699, 4023, 3794, 3272, 2115, 1071, 6566, 4004, 4811, 1390, 1035, 1168, 2087, 3618, 3737, 7162, 5644, 6591, 6793, 3226, 4990, 2124, 2080, 3216, 3289, 4311, 4476, 5232, 5076, 1405, 1657, 1831, 3508, 1126, 1082, 5356, 6374, 1453, 1607, 1047, 3302, 5440, 4677, 6789, 6130, 1521, 2259, 1534, 1058, 6747, 4201, 6682, 3713, 7033, 1316, 2791, 3417, 5819, 5112, 7325, 3011, 3043, 2042, 4421, 2426, 1584, 2230, 3296, 3854, 3959, 4053, 4680, 6714, 1321, 1199, 2707, 5324, 2529, 3456, 2387, 4126, 6657, 1690, 7193, 4271, 3061, 1425, 4325, 3856, 6219, 5391, 1591, 2698, 5568, 3384, 4189, 6732, 6977, 4283, 7422, 3621, 5979, 2138, 4882, 4600, 7289, 4419, 4179, 4813, 3277, 2968, 6129, 5230, 6252, 5394, 3135, 6982, 7136, 5257, 5912, 2299, 6760, 5668, 3419, 2714, 7333, 1835, 4225, 6232, 3373, 1951, 4035, 2814, 2296, 5863, 2375, 7171, 1761, 5006, 6703, 7435, 5643, 4891, 7019, 5406, 4604, 3858, 3655, 7181, 6525, 2217, 4319, 7186, 4346, 1615, 2356, 4734, 5339, 5378, 6342, 6351, 2690, 2222, 5557, 7243, 7274, 1700, 6057, 3895, 6116, 7323, 6496, 6926, 6373, 6141, 2931, 2770, 4495, 1862, 4519, 2513, 3546, 2821, 3663, 3716, 5565, 4515, 6087, 6687, 4818, 1969, 1203, 1140, 1398, 7067, 3787, 5467, 1587, 4713, 3681, 4652, 3468, 1041, 4257, 2158, 7328, 6369, 4594, 5164, 6969, 1121, 1124, 3076, 4099, 2548, 6613, 6947, 5807, 5642, 6055, 5016, 2394, 7144, 2357, 1350, 3841, 6880, 5189, 2960, 6187, 6818, 4988, 6989, 3380, 5434, 4897, 1786, 2594, 1691, 2509, 5048, 3261, 4676, 6840, 5396, 1874, 2924, 1284, 1269, 6390, 2544, 7114, 1654, 6271, 2925, 6884, 2635, 3950, 1840, 6460, 3074, 2268, 6275, 7326, 6988, 3278, 5278, 4109, 2836, 2565, 2482, 5358, 2571, 4332, 7412, 5620, 4715, 2787, 2541, 5908, 6134, 1428, 6448, 5988, 1741, 1767, 2144, 5599, 4817, 1573, 3499, 5611, 2951, 6154, 7245, 5354, 3899, 3659, 4711, 1586, 5480, 1381, 3270, 1236, 6588, 2275, 2295, 2462, 4455, 1444, 2907, 2917, 5328, 6286, 4235, 1388, 1407, 7420, 6289, 1265, 4360, 1366, 3162, 6267, 7183, 4851, 3701, 2665, 5952, 7276, 2620, 4050, 7273, 1898, 3222, 6771, 4625, 6176, 4612, 2738, 4464, 5266, 6961, 5987, 3827, 6995, 1225, 5684, 2333, 4219, 4398, 2233, 3438, 2169, 3846, 2568, 2183, 2751, 5455, 2492, 6003, 6182, 4905, 4933, 2896, 1339, 3028, 2406, 3698, 6365, 2510, 5799, 2581, 4902, 6216, 2373, 3859, 3823, 7165, 3545, 4489, 5265, 6482, 5201, 5862, 5772, 6334, 5790, 4268, 6250, 3178]


def get_72_random_SME_meter_ids():
    # Hardcoded list obtained with:
    """
    dset = pd.read_csv("./script_results/meterID_electricity.csv", sep=",", index_col='ID')
    dset = dset[dset.Code==2]
    list_of_ids = dset.index.values.tolist()
    list_of_ids = random.sample(list_of_ids, 72)
    print("SME", list_of_ids)
    return list_of_ids
    """
    return [2175, 6670, 4539, 3274, 3784, 3656, 4015, 6867, 7166, 5132, 1021, 5437, 2351, 6946, 5793, 1478, 5703, 6004, 7258, 3392, 1683, 1369, 7348, 7015, 1056, 3188, 3935, 6458, 3885, 5421, 5548, 1443, 6627, 1651, 5361, 5791, 4976, 3760, 1525, 7427, 6909, 3429, 2674, 4285, 1688, 5897, 5298, 7001, 2200, 5613, 7087, 5694, 5103, 4873, 5026, 6701, 3509, 6348, 1285, 5588, 6520, 6453, 3882, 5259, 5767, 2174, 1693, 5986, 3573, 2242, 4205, 3776]


def get_119_random_other_meter_ids():
    # Hardcoded list obtained with:
    """
    dset = pd.read_csv("./script_results/meterID_electricity.csv", sep=",", index_col='ID')
    dset = dset[dset.Code==3]
    list_of_ids = dset.index.values.tolist()
    list_of_ids = random.sample(list_of_ids, 119)
    print("Other", list_of_ids)
    return list_of_ids
    """
    return [6078, 5433, 3911, 2983, 5738, 6101, 7367, 5883, 2994, 2350, 4690, 2995, 1019, 2705, 2363, 4186, 4649, 1215, 1520, 1784, 6744, 3396, 3863, 1327, 5885, 6269, 6260, 5798, 6030, 4359, 1118, 4197, 6195, 3933, 2173, 5277, 1087, 4440, 1631, 6472, 6045, 1687, 3544, 4264, 1748, 1787, 3878, 4789, 6731, 3040, 2380, 7054, 5388, 4002, 1412, 3654, 6893, 2316, 5186, 3607, 2771, 7363, 1117, 4330, 3938, 6824, 1967, 1563, 6388, 6406, 4613, 5953, 3990, 2341, 1988, 1363, 6767, 6413, 6095, 5131, 2617, 4869, 3186, 4757, 3324, 1474, 1248, 3829, 3608, 2142, 1998, 6221, 4425, 2964, 6151, 7145, 3491, 5347, 4069, 1496, 3018, 1098, 1614, 6594, 1447, 3166, 5825, 1773, 6093, 3838, 4067, 3967, 5692, 3068, 1871, 4460, 1218, 5587, 1745]


def get_158_allocation_1_meter_ids():
    # Hardcoded list obtained with:
    """
    dset = pd.read_csv("./script_results/meterID_gas.csv", sep=",", index_col='ID')
    dset = dset[dset.Code == 1]
    list_of_ids = dset.index.values.tolist()
    list_of_ids = random.sample(list_of_ids, 158)
    print("List[1]->", list_of_ids)
    return list_of_ids
    """
    return [1838, 1617, 2365, 2469, 2472, 2395, 2008, 1099, 1340, 2433, 2195, 1170, 1847, 1230, 1480, 1748, 1853, 1924, 2190, 2460, 1667, 1500, 2210, 1712, 2239, 2478, 2499, 1355, 1207, 2164, 2022, 1983, 1919, 2489, 2141, 2560, 2513, 2216, 1086, 1259, 1650, 1043, 1446, 1331, 1096, 1474, 1902, 1165, 1376, 2205, 1655, 2267, 1612, 1411, 2029, 1508, 1833, 2051, 2044, 2095, 1629, 1740, 1421, 1843, 1623, 2111, 1962, 1080, 1701, 1569, 1755, 1280, 1538, 2555, 1868, 1890, 1372, 2407, 1952, 1346, 1837, 2375, 2099, 2310, 1245, 1493, 1402, 1124, 2105, 2228, 1270, 1328, 1879, 1058, 2412, 1781, 2278, 1730, 2534, 1140, 1913, 2085, 2422, 2292, 1947, 2017, 1361, 2297, 1451, 1750, 1368, 1532, 1974, 1645, 2060, 1468, 1908, 1014, 1382, 2519, 1546, 1941, 2034, 1884, 2069, 1597, 1581, 2566, 1724, 1634, 2179, 1587, 2349, 1000, 1322, 2418, 1275, 2388, 1779, 1765, 1227, 2453, 1828, 2007, 2233, 1334, 2428, 1162, 2198, 1656, 1457, 2236, 1851, 2072, 1110, 2307, 2277, 2002]


def get_152_allocation_2_meter_ids():
    # Hardcoded list obtained with:
    """
    dset = pd.read_csv("./script_results/meterID_gas.csv", sep=",", index_col='ID')
    dset = dset[dset.Code == 2]
    list_of_ids = dset.index.values.tolist()
    list_of_ids = random.sample(list_of_ids, 152)
    print("List[2]->", list_of_ids)
    return list_of_ids
    """
    return [1959, 1963, 1514, 1844, 1576, 1329, 2444, 1237, 1258, 2124, 1217, 1646, 2366, 1231, 2356, 1458, 1398, 1485, 1422, 2514, 1271, 2084, 1198, 1481, 2268, 1545, 1246, 1685, 1770, 1117, 2240, 1969, 1276, 1766, 1582, 1066, 2263, 1690, 2079, 1914, 2013, 1059, 1252, 1618, 2030, 1578, 1409, 2344, 1745, 1640, 2293, 1416, 2376, 2438, 2546, 2272, 2339, 1317, 2355, 1403, 1737, 1556, 1651, 1491, 1869, 1598, 1383, 1015, 1725, 1978, 1377, 2023, 1975, 1953, 2572, 1761, 1501, 1848, 2068, 1111, 1221, 1161, 2136, 2504, 1309, 2245, 1081, 1533, 1388, 1281, 1539, 1657, 1925, 1356, 1125, 1782, 1181, 2234, 1139, 1028, 1289, 2045, 2058, 1265, 1112, 1809, 2100, 1296, 2119, 2429, 1129, 2175, 1713, 1256, 2345, 2154, 1202, 1347, 1630, 1509, 1854, 1314, 1931, 2526, 1432, 2258, 2062, 1171, 1241, 1341, 1707, 2465, 2500, 2251, 1452, 1897, 1668, 2300, 2003, 1891, 2413, 1494, 1624, 1527, 1903, 2253, 1038, 1208, 2231, 1082, 2148, 1522]

def get_168_allocation_3_meter_ids():
    # Hardcoded list obtained with:
    """
    dset = pd.read_csv("./script_results/meterID_gas.csv", sep=",", index_col='ID')
    dset = dset[dset.Code == 3]
    list_of_ids = dset.index.values.tolist()
    list_of_ids = random.sample(list_of_ids, 168)
    print("List[3]->", list_of_ids)
    return list_of_ids
    """
    return [1324, 1816, 1810, 1926, 1357, 1691, 2101, 1835, 2535, 2171, 1552, 2372, 1470, 1229, 1892, 1859, 2393, 1172, 1141, 1510, 2059, 1016, 1023, 2257, 1247, 1613, 1762, 1188, 1266, 1282, 1561, 1495, 2435, 2107, 1330, 1935, 1358, 2470, 1787, 2556, 1010, 2439, 1682, 1214, 1937, 1798, 1060, 1583, 1242, 1702, 1565, 2035, 1732, 2057, 2223, 2185, 1315, 1679, 1960, 2252, 1720, 1151, 1203, 2083, 2046, 2149, 1898, 2505, 1995, 2137, 2230, 1625, 2143, 2273, 1039, 2294, 1193, 1954, 1067, 2166, 2197, 1778, 2511, 1998, 2004, 2053, 1127, 2192, 2408, 1874, 2350, 1863, 1592, 1636, 1447, 1335, 2125, 2461, 1464, 1949, 2501, 1303, 2187, 1394, 2040, 2562, 1389, 1680, 2131, 2515, 1318, 1820, 1384, 1209, 2466, 1714, 1100, 1499, 1675, 1126, 2383, 2091, 2191, 2360, 1804, 2018, 1870, 2203, 1662, 2474, 1515, 1726, 2484, 2102, 1756, 1697, 1156, 2113, 1528, 1378, 1295, 2430, 1886, 2451, 1218, 2172, 1222, 1652, 1696, 1121, 2389, 1505, 1551, 1518, 2541, 1984, 2235, 2246, 1476, 1146, 1273, 2031, 2097, 1718, 1006, 2547, 1363, 2259]

def get_170_allocation_4_meter_ids():
    # Hardcoded list obtained with:
    """
    dset = pd.read_csv("./script_results/meterID_gas.csv", sep=",", index_col='ID')
    dset = dset[dset.Code == 4]
    list_of_ids = dset.index.values.tolist()
    list_of_ids = random.sample(list_of_ids, 170)
    print("List[4]->", list_of_ids)
    return list_of_ids
    """
    return [1055, 1971, 2274, 2542, 2471, 2384, 2531, 2557, 2080, 2563, 1921, 1927, 1459, 2527, 2536, 1936, 1107, 2126, 1955, 1283, 1620, 1261, 1647, 1352, 2371, 2255, 1194, 2462, 1614, 2409, 1948, 1152, 1958, 1933, 2150, 1619, 1965, 2552, 2425, 1073, 2396, 2144, 1253, 1976, 1846, 1045, 2270, 1200, 1626, 2115, 1255, 1277, 1911, 2467, 2229, 1342, 2225, 1123, 1302, 2400, 2502, 2014, 1860, 1815, 2247, 1496, 1061, 1648, 2486, 1319, 1663, 1875, 1471, 1588, 1240, 1887, 1575, 2361, 1526, 1794, 1233, 1817, 1893, 1223, 2086, 1799, 1135, 1183, 1178, 1516, 1390, 2254, 1113, 2516, 1343, 2242, 1210, 1727, 2176, 1093, 1980, 1278, 1632, 1395, 1083, 2524, 1899, 2475, 1353, 1865, 1150, 1547, 2036, 1379, 2281, 1826, 1605, 1788, 2378, 1106, 1375, 2054, 1742, 1747, 1772, 2454, 2283, 1294, 1950, 1013, 1996, 1399, 2440, 1482, 1811, 2011, 1267, 2415, 1589, 1653, 2351, 1204, 1248, 1448, 2289, 2155, 2063, 1609, 2548, 1213, 1405, 1990, 1658, 2305, 1147, 2522, 1600, 1676, 1763, 1784, 2496, 1182, 1040, 2390, 1985, 1594, 1566, 1557, 1637, 2481]


def get_352_allocation_5_meter_ids():
    # Hardcoded list obtained with:
    """
    dset = pd.read_csv("./script_results/meterID_gas.csv", sep=",", index_col='ID')
    dset = dset[dset.Code == 5]
    list_of_ids = dset.index.values.tolist()
    list_of_ids = random.sample(list_of_ids, 352)
    print("List[5]->", list_of_ids)
    return list_of_ids
    """
    return [1148, 1374, 1664, 1385, 1037, 1768, 1678, 1307, 1521, 1225, 2271, 1249, 1298, 1489, 2043, 2508, 2081, 2027, 1018, 1299, 2537, 1968, 1473, 1728, 1063, 1284, 2163, 1224, 1649, 2167, 1381, 1062, 1677, 1862, 1380, 2549, 2479, 1306, 1004, 2401, 1841, 2092, 1734, 2012, 1164, 1131, 1244, 1396, 1711, 1074, 1206, 2368, 2353, 2358, 1553, 2140, 2056, 2432, 1543, 2436, 1345, 2558, 1956, 2385, 1366, 1175, 2227, 1773, 2122, 1269, 1607, 2188, 2402, 1163, 2162, 1883, 2016, 2050, 2364, 2411, 1424, 1095, 1855, 2398, 2564, 1143, 1456, 2006, 2488, 2302, 1085, 2265, 2544, 2543, 1460, 1488, 2512, 2480, 1643, 1705, 1729, 1981, 2306, 2533, 2468, 1867, 1693, 2127, 2392, 2249, 2220, 2420, 2082, 1090, 1070, 1560, 1184, 2284, 1590, 2374, 1291, 1159, 1268, 2145, 1754, 1185, 2133, 1687, 1917, 1951, 2158, 2373, 1436, 2156, 1929, 1749, 2157, 1610, 2266, 2049, 1876, 1943, 2417, 1057, 1536, 1699, 2161, 1977, 2507, 1360, 2184, 1866, 1285, 1957, 1466, 1872, 1483, 1987, 2476, 2276, 1132, 1764, 1168, 1263, 1918, 2177, 1894, 1852, 1297, 1922, 1579, 1888, 2065, 1327, 2301, 1563, 2048, 2173, 1354, 2094, 1991, 1120, 1401, 1842, 2483, 1525, 1142, 1912, 1425, 2021, 1326, 1264, 1461, 1041, 1633, 2348, 1445, 1386, 1174, 1542, 2128, 1196, 1812, 1119, 1586, 1967, 1973, 2342, 1558, 2042, 1450, 2208, 2379, 2431, 2026, 1051, 1109, 2554, 1986, 1084, 1993, 1497, 1700, 1205, 1896, 1997, 2387, 1644, 2427, 1009, 1574, 1716, 1003, 2416, 1638, 1622, 1312, 2215, 1537, 2194, 1611, 1136, 2038, 1822, 1250, 2117, 1429, 1511, 1370, 2033, 1036, 1672, 1639, 1585, 2077, 1419, 2146, 1709, 2232, 1801, 1260, 1226, 2498, 2221, 2261, 1025, 2226, 2285, 1026, 2280, 1316, 2523, 1596, 2569, 2397, 1234, 1595, 2098, 1827, 2256, 2290, 1397, 1412, 2015, 1498, 1169, 1484, 1344, 1621, 2010, 1047, 2503, 1549, 2487, 1019, 1602, 1723, 1351, 1531, 1467, 1615, 2209, 2386, 2174, 2362, 2066, 1414, 1671, 1901, 1333, 1774, 1437, 1966, 1946, 1530, 1945, 2369, 1704, 1098, 1392, 2214, 1201, 2497, 1940, 1807, 1627, 1688, 1008, 2482, 1128, 2121, 1030, 2020, 1478, 1836, 1877, 1507, 1520, 2199, 1069, 1279, 2517, 1046, 1420, 1130, 1239, 1695, 1694, 1440, 1243, 1882, 1089]


def count_meter_ids_proportion(meterIDs, type):
    if type == "Electricity":
        count1 = 0
        count2 = 0
        count3 = 0
        for meterID in meterIDs:
            classification = get_classification_of_meter_id(meterID, type)
            if classification == 1:
                count1 += 1
            elif classification == 2:
                count2 += 1
            elif classification == 3:
                count3 += 1
        print("Residentials:", count1)
        print("SMEs:", count2)
        print("Others:", count3)

    else:  # Gas
        count1 = 0
        count2 = 0
        count3 = 0
        count4 = 0
        count5 = 0
        for meterID in meterIDs:
            classification = get_classification_of_meter_id(meterID, type)
            if classification == 1:
                count1 += 1
            elif classification == 2:
                count2 += 1
            elif classification == 3:
                count3 += 1
            elif classification == 4:
                count4 += 1
            elif classification == 5:
                count5 += 1
        print("1:", count1)
        print("2:", count2)
        print("3:", count3)
        print("4:", count4)
        print("5:", count5)
