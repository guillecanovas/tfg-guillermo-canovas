'''
@Date:  03/07/2021
@author: RaÃºl Javierre

It creates a file (script_results/solar_hours_by_postcode.csv) which has the format: postcode,DT,is_sunny.
This file is useful, because it shows if the sun was shining (is_sunny) in a specific moment (DT)
in a specific zone (postcode).

It is a HEAVY script! It does:
- 73100 API GET calls to https://api.sunrise-sunset.org
- 100 API GET calls to http://api.beliefmedia.com
'''

import pandas as pd
import requests
import os
from datetime import datetime, timedelta  

def get_latitude_and_longitude_from_postcode(postcode):
    response = requests.get('http://api.beliefmedia.com/postcodes/'+ str(postcode) + '.json').json()['data']
    return [response['latitude'], response['longitude']]

def get_sunrise_and_sunset_from_latitude_longitude_and_date(lat, lng, date):
    response = requests.get('https://api.sunrise-sunset.org/json' + 
                                '?lat=' + lat + 
                                '&lng=' + lng +
                                '&date=' + date).json()['results']
    return [response['sunset'], response['sunrise']]

def transform_to_DT_format(DT_prefix, sun_hours):
    dt = list(range(48))
    is_sunny = [False] * 48
    midnight = datetime.strptime('00:00:00', '%H:%M:%S')
    sunrise = datetime.strptime(sun_hours[0], '%I:%M:%S %p')
    sunset = datetime.strptime(sun_hours[1], '%I:%M:%S %p')

    for i in range(1, 48 + 1):
        dt[i - 1] = DT_prefix * 100 + i

        moment = (midnight + timedelta(minutes=30 * (i-1)))
        if moment > sunrise and moment < sunset:
            is_sunny[i - 1] = True

    return dt, is_sunny

if __name__ == '__main__':
    if os.path.exists('./script_results/solar_hours_by_postcode.csv'):
        print("The file ./script_results/solar_hours_by_postcode.csv was generated before!")
        exit(1)

    # Read CSV and skip the first row (just comments)
    dset = pd.read_csv('./datasets/Ausgrid/data/2010-2011 Solar home electricity data.csv', skiprows=1)
    
    # Filter the rows with electricity generation data
    # GG= Gross Generation for electricity generated by the solar system with a gross 
    # metering configuration, measured separately to household loads
    dset = dset[dset['Consumption Category'] == 'GG']

    #Filter the cols of interest
    cols = ['Customer','date','Postcode']
    dset = dset[cols]

    #Get the Postcodes
    postcodes = dset['Postcode'].drop_duplicates().to_list()

    for postcode in postcodes:
        print("Asking for latitude and longitude for: " + str(postcode))
        
        # Get latitude and longitude from postcode (https://www.beliefmedia.com.au/australian-postal-codes?interest=undefined&wemail=51f5883b0b4b2bb0e6ea97539759064e0f1869453353fe7ee1974dc3a94dfa38@beliefmedia.info&cdr=no)
        coords = get_latitude_and_longitude_from_postcode(postcode)

        DT_prefix = 100

        # Get list of dates
        list_of_dates = [d.strftime('%Y-%m-%d') for d in pd.date_range('20100701','20120630')]
        for date in list_of_dates:
            print("Asking for sun hours for: " + date)

            # Get sunrise and sunset from latitude and longitude (https://sunrise-sunset.org/api)
            sun_hours = get_sunrise_and_sunset_from_latitude_longitude_and_date(coords[0], coords[1], date)

            # Transform sunrise and sunset from XX:XX AM/PM to 01,02,... (DT format)
            # and get is_sunny array of the same length
            dt, is_sunny = transform_to_DT_format(DT_prefix, sun_hours)
            
            # Create or append to CSV file with the syntax postcode,DT,is_sunny?
            df = pd.DataFrame({'postcode': postcode, 'DT': dt, 'is_sunny?': is_sunny})
            df.to_csv('./script_results/solar_hours_by_postcode.csv', index=False, header=not os.path.exists('./script_results/solar_hours_by_postcode.csv'), mode='a')

            DT_prefix += 1

